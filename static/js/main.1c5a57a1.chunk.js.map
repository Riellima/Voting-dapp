{"version":3,"sources":["getWeb3.js","Header.js","Footer.js","Content.js","LeftColumn.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","async","ethereum","web3","Web3","enable","error","console","log","provider","providers","HttpProvider","Header","React","Component","render","isOwner","this","props","isVoter","userStatus","addr","className","Footer","Content","workflowStatus","voters","currentVoter","proposals","winningProposalID","runAddVoter","runNextStatus","runAddProposal","runSetVote","textChangeStatus","type","id","placeholder","onClick","map","proposal","index","description","hasVoted","votedProposalId","name","value","LeftColumn","statusList","status","key","App","state","accounts","contract","owner","walletConnected","componentDidMount","on","location","reload","eth","getAccounts","networkId","net","getId","deployedNetwork","VotingContract","networks","instance","Contract","abi","address","options","fromBlock","toBlock","getPastEvents","returnValues","voterAddress","methods","call","includes","getVoter","from","idProposalList","proposalId","push","getOneProposal","setState","voterAddr","document","getElementById","addVoter","send","addrList","addProposal","getProposals","voteButton","voteText","setVote","parseInt","remove","innerHTML","getCurrentVoter","startProposalsRegistering","endProposalsRegistering","startVotingSession","endVotingSession","tallyVotes","newStatus","Boolean","hostname","match","ReactDOM","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1c5a57a1.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React from 'react';\n\nexport default class Header extends React.Component {\n\n    render(){\n        const isOwner = this.props.isOwner;\n        const isVoter = this.props.isVoter;\n        const userStatus = isOwner? \"[ADMIN]\": isVoter? \"[VOTER]\" : \"[UNREGISTERED]\";\n        const addr = this.props.addr ? this.props.addr : \"NONE\";\n        return(\n            <div className=\"header\">\n                <h1>Voting system </h1>\n                <div className=\"user-infos\">\n                    <p>Connected address: {addr}</p>\n                    <p>{userStatus}</p> \n                </div>\n            </div>\n        )\n    }\n}\n","import React from 'react';\n\nexport default class Footer extends React.Component {\n\n    render(){\n        return(\n            <div className=\"footer\">\n                <hr/>\n                <p>Alyra - Project n°3 : Voting DApp - Marielle DIANDY</p> \n            </div>\n        )\n    }\n}\n","import React from 'react';\n\nexport default class Content extends React.Component {\n\n    render(){\n        const workflowStatus = this.props.workflowStatus;\n        const isOwner = this.props.isOwner;\n        const isVoter = this.props.isVoter;\n        const voters = this.props.voters;\n        const currentVoter = this.props.currentVoter;\n        const proposals = this.props.proposals;\n        const winningProposalID = this.props.winningProposalID;\n\n        const runAddVoter = this.props.runAddVoter;\n        const runNextStatus = this.props.runNextStatus;\n        const runAddProposal = this.props.runAddProposal;\n        const runSetVote = this.props.runSetVote;\n\n        const textChangeStatus = [\"Start proposals session\", \"End proposals session\", \"Start voting session\", \"End voting session\", \"Tally votes\"];\n\n        // The connected address is unknown\n        if (!isOwner && !isVoter){\n            return(\n                <div className=\"error\">\n                    <p>Sorry you are not registered as a voter...</p>\n                </div>\n            );\n        }\n\n        // 0 - Registerig voters\n        else if (workflowStatus===\"0\"){\n            if (isOwner){\n                return(\n                    <div>\n                        <input type=\"text\" id=\"voter-addr\" placeholder=\"Voter address\"/>\n                        <button onClick={runAddVoter} className=\"button1\">Add voter</button>\n                        <br/>\n                        <h3>List of voters</h3>\n                        <table>\n                            <tr>\n                                <th>WHITELIST</th>\n                            </tr>\n                            {voters.map((addr) => (\n                                <tr>\n                                    <td>{addr}</td>\n                                </tr>\n                            ))}\n                        </table>\n\n\n                        <button onClick={runNextStatus} className=\"button2\">{textChangeStatus[workflowStatus]}</button>\n                    </div>            \n                );\n            }\n            else if (isVoter){\n                return(\n                    <div>\n                        <p>You are registered as a voter!</p>\n                        <p>Wait for the next session to submit proposals</p>\n                    </div>\n                );\n            }\n        }\n\n        // 1 - Proposals session\n        else if (workflowStatus===\"1\"){\n            if(isOwner){\n                return(\n                    <div>\n                        <p>Voters are giving proposals...</p>\n                        <button onClick={runNextStatus} className=\"button2\">{textChangeStatus[workflowStatus]}</button>\n                    </div>\n                );\n            }\n            else if (isVoter){\n                return (   \n                    <div>\n                        <input type=\"text\" id=\"proposal\" placeholder=\"Describe your proposal\"/>\n                        <button className=\"button1\" onClick={runAddProposal}>Submit</button>\n\n                        <br/>\n                        <h3>List of proposals</h3>\n                        <table>\n                            <tr>\n                                <th>ID</th>\n                                <th>DESCRIPTION</th>\n                            </tr>\n                            {proposals.map((proposal, index) => (\n                                <tr>\n                                    <td>{index}</td>\n                                    <td>{proposal.description}</td>\n                                </tr>\n                            ))}\n                        </table>\n                        <br/>\n                    </div>\n                );\n            }\n        }\n\n        //2 - End of proposals session\n        else if (workflowStatus===\"2\"){\n            if (isOwner){\n                return (   \n                    <div>\n                        <br />\n                        <button onClick={runNextStatus} className=\"button2\">{textChangeStatus[workflowStatus]}</button>\n                    </div>\n                )\n            }\n            else if (isVoter){\n                return (   \n                    <div>\n                        <p>Wait for the next session to vote for your favorite proposal</p>\n                    </div>\n                )\n            }\n        }\n\n        //3 - Voting session\n        else if (workflowStatus===\"3\"){\n            if (isOwner){\n                return (   \n                    <div>\n                        <p>Voters are voting for their favorite proposal...</p>\n                        <br/>\n                        <button onClick={runNextStatus} className=\"button2\">{textChangeStatus[workflowStatus]}</button>\n                    </div>\n                )\n            }\n            else if (isVoter){\n                if (currentVoter.hasVoted){\n                    return (   \n                        <div>\n                            <h3>Your choice:</h3>\n                            <p>You voted for proposition #{currentVoter.votedProposalId}</p>\n                        </div>\n                    )\n                }\n                else {\n                    return (   \n                        <div>\n                            <h3>Your choice:</h3>\n                            <select name=\"select-proposal\" id=\"select-proposal\">\n                                {proposals.map((proposal, index) => (\n                                    <option value={index}>{index} - {proposal.description} </option>\n                                ))}\n                            </select>\n                            <button onClick={runSetVote} className=\"button1\" id=\"vote-button\">Vote</button>\n                            <p id=\"vote-text\" ></p>\n                        </div>\n                    )\n                }\n\n            }\n        }\n\n        // 4 - End of voting session\n        else if (workflowStatus===\"4\"){\n            if (isOwner){\n                return (   \n                    <div>\n                        <button onClick={runNextStatus} className=\"button2\">{textChangeStatus[workflowStatus]}</button>\n                    </div>\n                )\n            }\n            else if (isVoter){\n                return (   \n                    <div>\n                        <p>Wait for the results in next session</p>\n                    </div>\n                )\n            }\n        }\n\n        // 5 - Tally votes\n        else if (workflowStatus===\"5\"){\n            return (   \n                <div>\n                    <h1>The winner is:</h1>\n                    <h2> Proposal #{winningProposalID} </h2>\n                </div>\n            )\n        }\n\n        else {\n            return (   \n                <div className=\"error\">Workflow status ERROR</div>\n            )\n        }\n\n    }\n}","import React from 'react';\n\nexport default class LeftColumn extends React.Component {\n\n    render(){\n        const workflowStatus = this.props.workflowStatus;\n        const statusList = this.props.statusList;\n        \n        return(\n            <div className=\"left-column\">\n\n                <h3>Workflow status</h3>\n                <ul>\n                    {statusList.map((status) => (\n                        <li key={status} className={status===statusList[workflowStatus] ? \"active\" : \"\"}>{status}</li>\n                    ))}\n                </ul>\n                  \n            </div>\n        )\n    }\n}\n","import React, { Component } from \"react\";\nimport VotingContract from \"./contracts/Voting.json\";\nimport getWeb3 from \"./getWeb3\";\nimport Header from \"./Header.js\";\nimport Footer from \"./Footer.js\";\nimport Content from \"./Content.js\";\nimport LeftColumn from \"./LeftColumn\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = { workflowStatus: 0, web3: null, accounts: null, contract: null, voters: null, currentVoter: null, owner: null, isOwner: false, isVoter: false, proposals: [], winningProposalID: 0, walletConnected: false};\n\n  componentDidMount = async () => {\n    try {\n      window.ethereum.on('accountsChanged',function(){\n        window.location.reload();\n      });\n      window.ethereum.on('chainChanged',function(){ \n        window.location.reload();\n      });\n\n      const web3 = await getWeb3();\n      const accounts = await web3.eth.getAccounts();\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = VotingContract.networks[networkId];\n      const instance = new web3.eth.Contract(\n        VotingContract.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n\n      let options = {\n        fromBlock: 0,\n        toBlock: 'latest'\n      };\n\n      let voters = (await instance.getPastEvents('VoterRegistered', options)).map(\n        (addr) => (addr.returnValues.voterAddress));\n\n      const workflowStatus = await instance.methods.workflowStatus().call();\n      const owner = await instance.methods.owner().call();\n      const isOwner =  accounts[0]===owner;\n      const isVoter = voters.includes(accounts[0]);\n\n      // Get current voter\n      let currentVoter = null;\n      if (isVoter) {\n        currentVoter = await instance.methods.getVoter(accounts[0]).call({ from: accounts[0] });\n      }\n\n      // Get the proposals \n      let proposals = [];\n      if (isVoter){\n        const idProposalList = (await instance.getPastEvents('ProposalRegistered', options))\n        .map((proposal) => (proposal.returnValues.proposalId));\n\n        for (let id of idProposalList){\n          proposals.push(await instance.methods.getOneProposal(id).call({ from: accounts[0] }));\n        }\n      }\n\n      //Winning proposal id\n      let winningProposalID = 0;\n      if (workflowStatus === 5){\n        winningProposalID = await instance.methods.winningProposalID().call();\n      }\n\n      // Set state \n      this.setState({workflowStatus, web3, accounts, contract: instance, voters, currentVoter, owner, isOwner, isVoter, proposals, winningProposalID, walletConnected: true});\n      console.log(\"current voter : \", this.state.currentVoter);\n\n    } catch (error) {\n      /*alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );*/\n      this.setState({walletConnected: false});\n      console.error(error);\n    }\n  };\n\n  runAddVoter = async () => {\n    const { accounts, contract} = this.state;\n    let voterAddr = document.getElementById(\"voter-addr\").value;\n    await contract.methods.addVoter(voterAddr).send({ from: accounts[0] });\n\n    let options = {\n      fromBlock: 0,\n      toBlock: 'latest'\n    };\n\n    const addrList = (await contract.getPastEvents('VoterRegistered', options))\n                      .map((addr) => (addr.returnValues.voterAddress));\n    this.setState({voters: addrList });\n    document.getElementById(\"voter-addr\").value = \"\";\n  };\n\n  runAddProposal = async () => {\n    const { accounts, contract} = this.state;\n    let proposal = document.getElementById(\"proposal\").value;\n\n    await contract.methods.addProposal(proposal).send({ from: accounts[0] });\n\n    this.getProposals();\n    document.getElementById(\"proposal\").value = \"\";\n  };\n\n  runSetVote = async () => {\n    const { accounts, contract} = this.state;\n    let proposalId = document.getElementById(\"select-proposal\");\n    let voteButton = document.getElementById(\"vote-button\");\n    let voteText = document.getElementById(\"vote-text\");\n\n    await contract.methods.setVote(parseInt(proposalId.value)).send({ from: accounts[0] });\n \n    proposalId.remove();\n    voteButton.remove();\n    voteText.innerHTML = \"You voted for proposal \" + proposalId.value;\n    this.getProposals();\n    this.getCurrentVoter();\n  };\n\n  runNextStatus = async () => {\n    const { workflowStatus, accounts, contract} = this.state;\n    switch(workflowStatus){\n      case \"0\":\n        await contract.methods.startProposalsRegistering().send({ from: accounts[0] }); \n        break;\n      case \"1\":\n        await contract.methods.endProposalsRegistering().send({ from: accounts[0] });\n        break;\n      case \"2\":\n        await contract.methods.startVotingSession().send({ from: accounts[0] }); \n        break;\n      case \"3\":\n        await contract.methods.endVotingSession().send({ from: accounts[0] }); \n        break;\n      case \"4\":\n        await contract.methods.tallyVotes().send({ from: accounts[0] });\n        const winningProposalID = await contract.methods.winningProposalID().call();\n        this.setState({winningProposalID});\n        break;\n      default: \n        console.log(\"Error runNextStatus: invalid workflow status\");\n        break;\n    }\n    const newStatus = await contract.methods.workflowStatus().call();\n    this.setState({workflowStatus: newStatus});\n  };\n\n  getProposals = async () => {\n    const { accounts, contract} = this.state;\n    let options = {\n      fromBlock: 0,\n      toBlock: 'latest'\n    };\n\n    let proposals = [];\n    const idProposalList = (await contract.getPastEvents('ProposalRegistered', options))\n    .map((proposal) => (proposal.returnValues.proposalId));\n\n    for (let id of idProposalList){\n      proposals.push(await contract.methods.getOneProposal(id).call({ from: accounts[0] }));\n    }\n    // Set state \n    this.setState({proposals});\n  }\n\n  getCurrentVoter = async () => {\n    const { accounts, contract, isVoter} = this.state;\n\n    this.setState({currentVoter: null});\n\n    if (isVoter){\n      const currentVoter = await contract.methods.getVoter(accounts[0]).call({ from: accounts[0] });\n      this.setState({currentVoter});\n    }\n  }\n\n  render() {\n    const statusList = [\"Registering session\", \"Proposals session\", \"End of proposals session\", \"Voting session\", \"End of voting session\", \"Votes tallied\"];\n    if (!this.state.web3) {\n      return(\n          <div > Loading Web3, accounts, and contract...  </div>\n      )//todo  connected wallet \n   //            No wallet connected.\n   //Please connect your wallet.\n    }\n    return (\n      <div className=\"App\">\n        <Header \n          addr={this.state.accounts[0]} \n          isOwner={this.state.isOwner} \n          isVoter={this.state.isVoter}/>\n        <hr/>\n        <LeftColumn \n          workflowStatus={this.state.workflowStatus}\n          statusList={statusList}/>\n\n        <div className=\"content\">\n          <h1>{ statusList[this.state.workflowStatus] }</h1>\n          <Content\n            workflowStatus={this.state.workflowStatus}\n            voters={this.state.voters}\n            proposals={this.state.proposals}\n            owner={this.state.owner}\n            isOwner={this.state.isOwner}\n            isVoter={this.state.isVoter}\n            currentVoter={this.state.currentVoter}\n            statusList={statusList}\n            walletConnected={this.state.walletConnected}\n            winningProposalID={this.state.winningProposalID}\n            runAddVoter={this.runAddVoter}\n            runAddProposal={this.runAddProposal}\n            runNextStatus={this.runNextStatus}\n            runSetVote={this.runSetVote}/>   \n        </div>\n\n          \n        <Footer/>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}